// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        cells: { value: [1.0,1.0] }
        fps: { value: 1.0 }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;

  uniform sampler2D mainTexture;
  uniform Constant {
    vec4 mainColor;
    vec2 cells;
    float fps;
  };

  vec4 frag () {
    float index = floor(cc_time.x * fps);

    float row = cells.x;
    float col = cells.y;

    vec2 offset = vec2(mod(index, col) / col, floor(index / col) / row);
    vec4 color = mainColor * texture(mainTexture, v_uv / cells.yx + offset);

    

    // 透明算法1
    if (color.r == 0.0) {
      color.a = color.b;

      if (color.b == 0.0) {
        color.a = color.g;
      }
    } else {
      color.a = color.r;
    }

    // 透明算法2 纯黑部分透明，不纯黑部分半透明
    // color.a = (color.r + color.g + color.b) / 3.0;
    
    CC_APPLY_FOG(color, v_position);

    return CCFragOutput(color);
  }
}%
