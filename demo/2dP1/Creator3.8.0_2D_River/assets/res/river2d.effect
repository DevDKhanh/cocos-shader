// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        bgTex: { value: white }
        noiseTex: {  value: white }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%


CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec2 uv0;

  // 背景底图
  uniform sampler2D bgTex;
  // 噪声贴图
  uniform sampler2D noiseTex;

  // 随机函数,将二维坐标转为一维随机值
  float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
  }

  vec4 frag () {
    vec3 c = vec3(0.);
    // 从 cc_time 获取全局的时间变量, 用于获取噪声值
    float t = cc_time.x * 0.6;
    // 从噪声贴图中采样噪声值
    vec2 off1 = texture(noiseTex, uv0 + t * vec2(.5, .1)).xy;
    // 噪声值 进行一定的缩放(避免数值过大)
    off1 *= .005;
    // 通过 uv 并进行一定的偏移来采样背景贴图
    c += texture(bgTex, off1 + uv0).xyz;
    // 使用平滑阶段函数将 UV 的 y 限定在 [-0.8 ~ 1.0] 之间
    c *= smoothstep(-.5 , 1.3, uv0.y) - .3;
    // 获取原色 UV 并进行 UV.y 的缩放
    vec2 mouv = uv0;
    mouv.y *= 20.;
    // 对 uv.y 数值向下取整
    float n3 = floor(mouv.y);
    // 获取 UV 的随机值 n4
    float n4 = random(vec2(n3, n3)) + .3;
    // 获取原始 UV 并进行宽比缩放
    vec2 baseuv = uv0;
    vec2 scale = vec2(4., 3.);
    baseuv = baseuv * scale;
    // 对 UV.x 进行偏移, 并进行随机移动
    baseuv.x += t * .1 * n4;
    // 从噪声贴图上采样随机点
    float c1 = texture(noiseTex, baseuv).x;
    // 使用平滑阶段函数将随机噪点大小限制在 [0.0 ~ 0.23] 之间
    c1 = smoothstep(0.23, 0., c1);
    // 将随机噪点叠加到 color 上
    c += vec3(c1);
    
    return vec4(c, 1.);
  }
}%